name: Release

on:
  workflow_dispatch:
permissions: write-all
env:
  CONTAINER_REGISTRY_NAME: "kanprod.azurecr.io"

jobs:
  build:
    if: github.repository == 'azure/kan' && github.actor == 'Haishi2016'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create branch
        uses: peterjgrainger/action-create-branch@v3.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
        with:
          branch: release-branch
          
      - uses: actions/checkout@v4
        with:
          ref: release-branch
          
      - name: Install jq
        run: |
          sudo apt-get update
          sudo snap install jq
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY_NAME }}
          username: kanprod
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Login to Helm Registry
        run: helm registry login ${{ env.CONTAINER_REGISTRY_NAME }} -u kanprod --password ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          
      - name: increment version
        id: increment_version
        run: |
          version=$(cat .github/version/versions.txt)
          IFS='.' read -ra VERSION_PARTS <<< "$version"
          VERSION_PARTS[2]=$((VERSION_PARTS[2] + 1))
          new_version="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          echo $new_version > .github/version/versions.txt
          echo "MODULE_VERSION=$new_version" >> $GITHUB_ENV

      - name: Build portal        
        run: |
          version=$(cat .github/version/versions.txt)
          echo $version > src/portal/modules/webmodule/version.txt
          export WEBMODULE_PATH="${GITHUB_WORKSPACE}/src/portal/modules/webmodule"          
          cd src/portal
          echo CONTAINER_REGISTRY_NAME=${{ secrets.CONTAINER_REGISTRY_NAME }} > .env
          echo APPLICATIONINSIGHTS_INSTRUMENTATION_KEY=${{ secrets.APPLICATIONINSIGHTS_INSTRUMENTATION_KEY }} >> .env
          echo APPLICATIONINSIGHTS_INGESTION_ENDPOINT=${{ secrets.APPLICATIONINSIGHTS_INGESTION_ENDPOINT }} >> .env
          echo APPLICATIONINSIGHTS_TENANT_ID=${{ secrets.APPLICATIONINSIGHTS_TENANT_ID }} >> .env
          echo APPLICATIONINSIGHTS_CLIENT_ID=${{ secrets.APPLICATIONINSIGHTS_CLIENT_ID }} >> .env
          echo APPLICATIONINSIGHTS_CLIENT_SECRET=${{ secrets.APPLICATIONINSIGHTS_CLIENT_SECRET }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          make build     
          make push
          
      - name: Build portal Helm chart
        run: |
          cd Deploy/helm
          ./release.sh kanprod

      - name: Build kan ai container
        run: |
          version=$(cat .github/version/versions.txt)
          cd src/edge
          json_file=EdgeSolution/modules/kanai/module.json
          chmod +rw $json_file
          sudo jq --arg v "$version" '.image.tag.version = $v' "$json_file" > temp.json
          sudo mv temp.json "$json_file"
          pip install -r requirements.txt
          python devops.py build-all
          python devops.py push-all
          
      - name: Update version number in installer
        run: |
          version=$(cat .github/version/versions.txt)
          file_path="Installer/kan-installer.sh"
          NEW_SYMPHONY_VERSION=$version          
          NEW_KANPORTAL_VERSION="$version-amd64"
          NEW_KANAI_VERSION=$version
          sed -i "s/symphony_version=[^ ]*/symphony_version=${NEW_SYMPHONY_VERSION}/" $file_path
          sed -i "s/kanportal_version=[^ ]*/kanportal_version=${NEW_KANPORTAL_VERSION}/" $file_path
          sed -i "s/kanai_version=[^ ]*/kanai_version=${NEW_KANAI_VERSION}/" $file_path

      - name: Commit changes
        run: |
          version=$(cat .github/version/versions.txt)
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/version/versions.txt
          git add Installer/kan-installer.sh          
          git commit -m "Bump version to $version"  
          git push
