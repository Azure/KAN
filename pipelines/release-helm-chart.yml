parameters:
  - name: forceUpdate
    displayName: Force Update Chart
    default: false
    type: boolean

trigger:
 branches:
   include:
     - development
 paths:
   include:
     - Deploy/helm/kanportal
steps:
- task: HelmInstaller@0
  inputs:
    helmVersion: '3.11.0'
    installKubectl: false

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
     export HELM_EXPERIMENTAL_OCI=1
     /opt/hostedtoolcache/helm/3.11.0/x64/linux-amd64/helm registry login $(acr_host) --username $(acr_username) --password $acr_password
  env:
    acr_password: $(acr_password)
  displayName: login acr
- task: Bash@3
  inputs:
    failOnStderr: false
    targetType: 'inline'
    script: |
      if /opt/hostedtoolcache/helm/3.11.0/x64/linux-amd64/helm show chart oci://$(acr_host)/helm/kanportal --version $(cat Deploy/helm/kanportal/Chart.yaml | grep version: | sed 's/.*"\(.*\)"/\1/') 2>&1 | grep -q fail; then
        echo "##vso[task.setvariable variable=chartExists;]false"
      else
        echo "##vso[task.setvariable variable=chartExists;]true"
      fi
  displayName: check chart exist

- task: Bash@3
  inputs:  
    failOnStderr: true
    targetType: 'inline'
    script: |
     exit 1
  displayName: Chart exists
  condition: and(eq(variables.chartExists, 'true'), eq('${{ parameters.forceUpdate }}', 'false'))
  continueOnError: false

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
     /opt/hostedtoolcache/helm/3.11.0/x64/linux-amd64/helm package Deploy/helm/kanportal
     /opt/hostedtoolcache/helm/3.11.0/x64/linux-amd64/helm push kanportal-$(ls kanportal*.tgz | sed 's/kanportal-\(.*\)\.tgz/\1/').tgz oci://$(acr_host)/helm
  displayName: build and push helm chart  
  condition: or(eq(variables.chartExists, 'false'), eq('${{ parameters.forceUpdate }}','true'))

