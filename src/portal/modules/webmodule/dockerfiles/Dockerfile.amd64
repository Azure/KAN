# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# =========================================================
# === Build Static UI                                   ===
# =========================================================
FROM node:16 as builder

WORKDIR /app
COPY ui/package.json .
COPY ui/yarn.lock .
RUN yarn install --production
COPY ui/tsconfig.json .
COPY ui/src/ ./src
COPY ui/public/ ./public
RUN yarn build

ARG GIT_LOG
RUN echo ${GIT_LOG} > ./build/static/git_sha1.txt

# =========================================================
# === Build Backend Base                                ===
# =========================================================
FROM amd64/python:3.8-slim-buster as backend-base
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    libgl1-mesa-glx \
    && rm -rf /var/lib/apt/lists/*
# libgl1-mesa-glx: opencv2 libGL.so error workaround

RUN apt-get update && \
    apt-get install -y curl
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash
RUN az extension add --name azure-iot
RUN az extension add --name storage-preview


# =========================================================
# === Build Backend Production                          ===
# =========================================================
FROM backend-base as backend-production

WORKDIR /app

ARG APPLICATIONINSIGHTS_INSTRUMENTATION_KEY
ENV APPLICATIONINSIGHTS_INSTRUMENTATION_KEY=$APPLICATIONINSIGHTS_INSTRUMENTATION_KEY
ARG APPLICATIONINSIGHTS_INGESTION_ENDPOINT
ENV APPLICATIONINSIGHTS_INGESTION_ENDPOINT=$APPLICATIONINSIGHTS_INGESTION_ENDPOINT
ARG APPLICATIONINSIGHTS_TENANT_ID
ENV APPLICATIONINSIGHTS_TENANT_ID=$APPLICATIONINSIGHTS_TENANT_ID
ARG APPLICATIONINSIGHTS_CLIENT_ID
ENV APPLICATIONINSIGHTS_CLIENT_ID=$APPLICATIONINSIGHTS_CLIENT_ID
ARG APPLICATIONINSIGHTS_CLIENT_SECRET
ENV APPLICATIONINSIGHTS_CLIENT_SECRET=$APPLICATIONINSIGHTS_CLIENT_SECRET
ARG SECRET_KEY
ENV SECRET_KEY=$SECRET_KEY

RUN python -m pip install --upgrade pip

COPY backend/requirements/core.txt requirements/core.txt
RUN pip install -r ./requirements/core.txt

COPY backend/requirements/base.txt requirements/base.txt
RUN pip install -r ./requirements/base.txt

COPY backend/requirements/production-x86.txt requirements/production-x86.txt
RUN pip install -r ./requirements/production-x86.txt

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libglib2.0-0

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    wget


COPY backend/manage.py .
COPY backend/config.py .
COPY backend/entry.sh .
COPY backend/vision_on_edge vision_on_edge
COPY backend/configs configs
RUN python manage.py makemigrations
RUN python manage.py migrate

COPY --from=builder /app/build vision_on_edge/ui_production
EXPOSE 8000


CMD bash entry.sh
# CMD python manage.py runserver 0.0.0.0:8000 --noreload